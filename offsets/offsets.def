//
// Updated for game build 76706/76765/76777 (2017-05-16)
//

// Game build ID
// Search for either L"Guild Wars 2" (2nd assert) or "build %u" to get the function ptr
//OFFSET(GetBuildId, 0x7ff748c03c80, "Build %u", 0, 0, 0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x7); }, nullptr)
OFFSET(buildId, 78258, "Build %u", 0, 0, 0, sizeof(uint32_t), true, true, VERIFY_CB { LOG_INFO("%-24s %d", "buildId", val); return val >= 76000 && val <= 100000; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x7); }, POST_CB_OFFSET(0x1) )
//OFFSET(buildId_cn, 76551, L"Guild Wars 2", 0, 2, 0xE, sizeof(uint32_t), true, false, VERIFY_CB { LOG_INFO("%-24s %d <%#I64x>", "buildId_cn", val, val); return val >= 76000 && val <= 100000; }, nullptr, nullptr)
//OFFSET(buildId_na, 76777, L"Gw2.dat", 0, 0, 0x6E, sizeof(uint32_t), true, false, VERIFY_CB { LOG_INFO("%-24s %d <%#I64x>", "buildId_na", val, val); return val >= 76000 && val <= 100000; }, nullptr, nullptr)

// CContext
// CharClient::CContext* m_charContext;
/*
This is the main game state object from which you can get to almost anything else. It can
only be safely accessed from within the game thread.
A pointer to this object can be found in the thread-local storage of the game thread. Windows
stores these in FS:[0x2c].
The current location is: (unlikely to change)
CContext ***localStorage = FS:[0x2c];
CContext *ctx = localStorage[0][1];

It consists of only pointers to other sub contexts and nulled out space.

The char context offset can be found by looking at the objects before and after the offset
where it was before and compare to the CharClient::CContext description.
"!IsPlayer() || GetPlayer()" + 0x1a = 64-bit mov opcode (mov rbp, qword ptr [rax + 0x??])
*/
/*================================================================================================
00007FF6C2490BE2 | 48 8D 15 17 E2 E3 00                | lea rdx,qword ptr ds:[7FF6C32CEE00]     | 7FF6C32CEE00:"..\\..\\..\\Game\\Char\\Cli\\ChCliCharacter.cpp"
00007FF6C2490BE9 | 48 8D 0D 20 E4 E3 00                | lea rcx,qword ptr ds:[7FF6C32CF010]     | 7FF6C32CF010:"!IsPlayer() || GetPlayer()"
00007FF6C2490BF0 | 41 B8 8A 07 00 00                   | mov r8d,78A                             |
00007FF6C2490BF6 | E8 E5 EF DD FF                      | call gw2-64.7FF6C226FBE0                |
00007FF6C2490BFB | E8 10 34 DC FF                      | call gw2-64.7FF6C2254010                |
00007FF6C2490C00 | 48 8B A8 90 00 00 00                | mov rbp,qword ptr ds:[rax+90]           |		<== THIS
================================================================================================*/
//OFFSET(charClientTlsSlot, 0x8, "", 0, 0, 0x0, sizeof(uint32_t), true, false, VERIFY_CB { return true; }, nullptr, nullptr)
OFFSET(charClientCtx, 0x90, "!IsPlayer() || GetPlayer()", 0, 0, 0x17, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x30 && val <= 0x120; }, nullptr, nullptr)
OFFSET(charClientCtxVt, 0x7ff71656efe8, "m_notifier.IsEmpty()", 0, 00, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x85); }, nullptr)
OFFSET(charCtxVtGetCtlPlayer, 0x50, "player == CharClientContext()->GetControlledPlayer()", 0, 0, -0x10, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x20 && val <= 0x120; }, nullptr, nullptr)

//
// Client Context offsets (g_client_ctx)
// CharClient::CContext
//

// ANet::Array<CharClient::CCharacter*> m_characterArray;
OFFSET(charCtxCharArray, 0x60, "m_characterArray[agentId] == character", 0, 0, -0x19, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x30 && val <= 0x180; }, nullptr, nullptr)

// ANet::Array<CharClient::CPlayer*> m_playerArray;
OFFSET(charCtxPlayArray, 0x80, "m_playerArray.Count() <= playerId || !m_playerArray[playerId]", 0, 0, -0x15, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x30 && val <= 0x180; }, nullptr, nullptr)

// CharClient::CCharacter* m_controlledCharacter;
OFFSET(charCtxCtlChar, 0x98, "!m_controlledCharacter || m_controlledCharacter->IsFinalized()", 0, 0, -0x20, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x30 && val <= 0x180; }, nullptr, nullptr)

// consecutive members: m_controlledPlayer = m_controlledCharacter + 8
// CharClient::CCharacter* m_controlledPlayer;
// "player == m_controlledPlayer"
// Can also be retrieved from the VT "CharClientContext()->GetControlledPlayer()"
OFFSET(charCtxCtlPlayer, 0xA0, "m_notifier.IsEmpty()", 0, 00, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return val >= 0x30 && val <= 0x180; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x85); }, POST_CB_VT(g_offsets.charCtxVtGetCtlPlayer.val, 0x3))


// "wmAgent->GetAgent() != agent"
OFFSET(wmAgVtGetAgent, 0x60, "wmAgent->GetAgent() != agent", 0, 0, -0x10, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x20 && val <= 0x180; }, nullptr, nullptr)

// search for "guildTagLogoFrame" and go the 2nd "agent" assert going up
/*===================================================================================
00007FF6C27C4E0F | 48 8D 15 EA 02 BD 00 | lea rdx, qword ptr ds : [7FF6C3395100]	| 7FF6C3395100 : "..\\..\\..\\Game\\Ui\\Widgets\\AgentStatus\\AsName.cpp"
00007FF6C27C4E16 | 48 8D 0D 57 E1 AF 00 | lea rcx, qword ptr ds : [7FF6C32C2F74]	| 7FF6C32C2F74 : "agent"
00007FF6C27C4E1D | 41 B8 FB 00 00 00	| mov r8d, FB								|
00007FF6C27C4E23 | E8 B8 AD AA FF		| call gw2 - 64.7FF6C226FBE0				|
00007FF6C27C4E28 | 49 8B CF				| mov rcx, r15								|
00007FF6C27C4E2B | E8 B0 1B 8B 00		| call gw2 - 64.7FF6C30769E0				|
00007FF6C27C4E30 | 48 85 C0				| test rax, rax								|
00007FF6C27C4E33 | 74 1C				| je gw2 - 64.7FF6C27C4E51					|
00007FF6C27C4E35 | 48 8B 10				| mov rdx, qword ptr ds : [rax]				|
00007FF6C27C4E38 | 48 8B C8				| mov rcx, rax								|
00007FF6C27C4E3B | FF 52 70				| call qword ptr ds : [rdx + 70]			|		<== THIS
===================================================================================*/
OFFSET(wmAgVtGetCodedName, 0x70, "48 85 C0 74 ?? 48 8B 10 48 8B C8 FF 52 ?? 48 85 C0 74 ?? 48 8B D0", 0, 0, 0xD, sizeof(uint8_t), false, false, VERIFY_CB { return val >= 0x30 && val <= 0x180; }, nullptr, nullptr)

// Agent Context offsets "ViewAdvanceAgentSelect" (g_agent_ctx)
// Agent::CAgentBase* m_lockedSelection;
OFFSET(agSelLocked, 0x230, "!m_lockedSelection", 0, 0, -0x11, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x100 && val <= 0x400; }, nullptr, nullptr)
// Agent::CAgentBase* m_autoSelection;
OFFSET(agSelAuto, 0x50, "!m_autoSelection", 0, 0, -0xE, sizeof(uint16_t), true, false, VERIFY_CB { return val >= 0x20 && val <= 0x120; }, nullptr, nullptr)
// Agent::CAgentBase* m_hoverSelection;
OFFSET(agSelHover, 0xF8, "!m_hoverSelection", 0, 0, -0x11, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x60 && val <= 0x200; }, nullptr, nullptr)
// Contex mode (cut-scene?)
OFFSET(agSelCtxMode, 0x70, "m_contextMode == CONTEXT_MODE_NULL", 0, 0, -0x5D, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x40 && val <= 0x140; }, nullptr, nullptr)


// Agent offsets.
// AgentView::CAvAgent
// "radiusCollision > 0" 2nd LEA up from first assert
OFFSET(agentVt, 0x7ff716984008, "This agent type provides no additional details [%p]", 0, 0, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o+0x91); }, nullptr)
OFFSET(agentVtGetId, 0xC0, "targetAgent && targetAgent->GetAgentId()", 0, 0, -0x12, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x80 && val <= 0x180; }, nullptr, nullptr)
OFFSET(agentVtGetCat, 0x20, "agent->GetCategory() == AGENT_CATEGORY_CHAR", 0, 0, -0xF, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x10 && val <= 0x100; }, nullptr, nullptr)
OFFSET(agentVtGetType, 0x140, "agent->GetType() == AGENT_TYPE_CHAR", 0, 0, -0x12, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x100 && val <= 0x200; }, nullptr, nullptr)
OFFSET(agentVtGetPos, 0x120, "75 ?? 4C 8B 07 48 8D 54 24 ?? 48 8B CF 41 FF 90", 0, 0, 0x10, sizeof(uint32_t), false, false, VERIFY_CB { return val >= 0x80 && val <= 0x180; }, nullptr, nullptr)
OFFSET(agentVtGetPos3, 0x118, "E8 ?? ?? ?? ?? 48 85 C0 74 ?? 4C 8B 00 48 8B D3 48 8B C8 41 FF 90", 0, 0, 0x16, sizeof(uint32_t), false, false, VERIFY_CB { return val >= 0x60 && val <= 0x180; }, nullptr, nullptr)
OFFSET(agentVtGetToken, 0x1E8, L"Content is referencing a propID", 0, 0, -0x7, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x120 && val <= 0x240; }, nullptr, nullptr)

OFFSET(agentId, 0x1C, "This agent type provides no additional details [%p]", 0, 0, 0x0, sizeof(uint8_t), true, true, VERIFY_CB { return val >= 0x10 && val <= 0x100; }, SHIFT_CB { return hl::FollowRelativeAddress(o+0x91); }, POST_CB_VT(g_offsets.agentVtGetId.val, 0x2))
OFFSET(agentType, 0x20, "This agent type provides no additional details [%p]", 0, 0, 0x0, sizeof(uint8_t), true, true, VERIFY_CB { return val >= 0x10 && val <= 0x100; }, SHIFT_CB { return hl::FollowRelativeAddress(o+0x91); }, POST_CB_VT(g_offsets.agentVtGetType.val, 0x2))

// Char offsets.
// CharClient::CCharacter
// ChCliCharacter
// "TTagList<struct CharClient::IEnergyMgrNotify>::~TTagList" (diff offset for CN, so we use the pattern)
OFFSET(charVt, 0x7ff7165760e8, "41 C7 46 78 01 00 00 00 E8 ?? ?? ?? ?? 48 8D 05", 0, 0, 0x0, sizeof(uint32_t), false, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o+0x10); }, nullptr)
OFFSET(charVt0, 0x7ff7165760e8, "!m_profession", 0, 0, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x475); }, nullptr)
// "m_agent && (m_agent->GetAgentId() == character->GetAgentId() || m_masterCharacter == character)"
OFFSET(charAgent, 0x88, "m_agent && (m_agent->GetAgentId() == character->GetAgentId() || m_masterCharacter == character)", 0, 0, -0x10, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x40 && val <= 0x140; }, nullptr, nullptr)
OFFSET(charSubclass, 0x8, "character->GetAgent() == m_agent", 0, 0, -0x19, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x0 && val <= 0x100; }, nullptr, nullptr)
OFFSET(charVtGetAgentId, 0x198, "m_agent && (m_agent->GetAgentId() == character->GetAgentId() || m_masterCharacter == character)", 0, 0, -0x20, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x100 && val <= 0x300; }, nullptr, nullptr)
OFFSET(charVtGetPlayer, 0x288, "!IsPlayer() || GetPlayer()", 0, 0, -0x13, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x200 && val <= 0x400; }, nullptr, nullptr)
OFFSET(charVtGetPlayerId, 0x290, "playerId", 0, 0, -0x14, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x200 && val <= 0x400; }, nullptr, nullptr)
//OFFSET(charPlayerId, 0x1D8, "41 C7 46 78 01 00 00 00 E8 ?? ?? ?? ?? 48 8D 05", 0, 0, 0x0, sizeof(uint32_t), false, true, VERIFY_CB { return val >= 0x100 && val <= 0x200; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x10); }, POST_CB_VT(g_offsets.charVtGetPlayerId.val, 0x3))
OFFSET(charVtIsPlayer, 0x450, "!IsPlayer() || GetPlayer()", 0, 0, -0x23, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x300 && val <= 0x500; }, nullptr, nullptr)
OFFSET(charVtIsAlive, 0x8, "character->IsAlive() || (character->IsDowned() && character->IsInWater())", 0, 0, -0x2F, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x0 && val <= 0x40; }, nullptr, nullptr)
OFFSET(charVtIsDowned, 0x350, "character->IsAlive() || (character->IsDowned() && character->IsInWater())", 0, 0, -0x22, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x240 && val <= 0x440; }, nullptr, nullptr)
OFFSET(charVtIsClone, 0x3F8, "character->IsPlayer() || character->IsMonsterClone()", 0, 0, -0x12, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x240 && val <= 0x440; }, nullptr, nullptr)
OFFSET(charVtIsMonster, 0x3D0, "IsPlayer() || IsMonster()", 0, 0, -0x12, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x240 && val <= 0x440; }, nullptr, nullptr)
// m_combatant
// Looks like combatant is simply char ptr + 0x30?
// i.e. no need to read the addr as 'c->cbptr = c->cptr+0x30;'
// Search for "TextValidateLiteral(m_nameOverride.Ptr())" scroll 1 function down (quite a lot)
// or search  for "character && character->IsFinalized()" (last hit) and scroll up 3 functions
/*=======================================================================================
00007FF6C248E830 | 48 85 C9                            | test rcx,rcx					|		<== OFF_CHAR_VT_GET_CMBTNT (CHAR_VT+offset)
00007FF6C248E833 | 74 05                               | je gw2-64.7FF6C248E83A			|
00007FF6C248E835 | 48 8D 41 30                         | lea rax,qword ptr ds:[rcx+30]	|		<== OFF_CHAR_COMBATANT
00007FF6C248E839 | C3                                  | ret							|
00007FF6C248E83A | 33 C0                               | xor eax,eax					|
00007FF6C248E83C | C3                                  | ret							|
00007FF6C248E83D | CC                                  | int3							|
00007FF6C248E83E | CC                                  | int3							|
00007FF6C248E83F | CC                                  | int3							|
=======================================================================================*/
// Can also search for "buffModifier"
// it seems the offset for VtGetCombatant is held in 2 vars both 0x118 and 0x110
OFFSET(charCombatant, 0x30, "48 FF 60 ?? CC CC 48 85 C9 74 05 48 8D 41 ?? C3 33 C0 C3 CC CC CC", 0, 0, 0xE, sizeof(uint8_t), false, false, VERIFY_CB { return val >= 0x10 && val <= 0x100; }, nullptr, nullptr)
OFFSET(charVtGetCombatant, 0x118, "buffModifier", 0, 0, -0x33, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x60 && val <= 0x180; }, nullptr, nullptr)
// 2nd "speciesDef" hit with "m_kennel", calls the char VT
OFFSET(charVtGetSpeciesDef, 0x2F0, "speciesDef", 0, 2, -0x18, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x200 && val <= 0x400; }, nullptr, nullptr)
OFFSET(charVtIsRangerPet, 0x448, "speciesDef", 0, 2, -0x3E, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x300 && val <= 0x500; }, nullptr, nullptr)
// Attitude m_attitudeTowardControlled;
OFFSET(charAttitude, 0xA8, "m_attitudeTowardControlled < Content::AFFINITY_ATTITUDES", 0, 0, -0x14, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x60 && val <= 0x180; }, nullptr, nullptr)
// CharClient::CBreakBar* m_breakBar;
// "m_breakBar" (only works as offset from gadget)
// search for "comboDef" and scroll down till "data"
// the VT is the 2nd function up, first offset is the breakbar
// "40 53 48 83 EC ?? 48 8B D9 48 8B 89 ?? ?? ?? ?? 48 85 C9 74 ?? 48 8B 01 BA 01 00 00 00"
/*===================================================================================
00007FF6C2494120 | 40 53				| push rbx									|
00007FF6C2494122 | 48 83 EC 20			| sub rsp, 20								|
00007FF6C2494126 | 48 8B D9				| mov rbx, rcx								|
00007FF6C2494129 | 48 8B 89 B0 00 00 00 | mov rcx, qword ptr ds : [rcx + B0]		|		<== THIS
00007FF6C2494130 | 48 85 C9				| test rcx, rcx								|
00007FF6C2494133 | 74 32				| je gw2 - 64.7FF6C2494167					|
00007FF6C2494135 | 48 8B 01				| mov rax, qword ptr ds : [rcx]				|
00007FF6C2494138 | BA 01 00 00 00		| mov edx, 1								|
00007FF6C249413D | FF 10				| call qword ptr ds : [rax]					|
00007FF6C249413F | 48 8D 8B C8 00 00 00 | lea rcx, qword ptr ds : [rbx + C8]		|
00007FF6C2494146 | 4C 8D 44 24 30		| lea r8, qword ptr ss : [rsp + 30]			|
00007FF6C249414B | 48 8D 15 26 2D 13 00 | lea rdx, qword ptr ds : [7FF6C25C6E78]	|
===================================================================================*/
OFFSET(charBreakbar, 0xB0, "40 53 48 83 EC ?? 48 8B D9 48 8B 89 ?? ?? ?? ?? 48 85 C9 74 ?? 48 8B 01 BA 01 00 00 00", 0, 0, 0xC, sizeof(uint32_t), false, false, VERIFY_CB { return val >= 0x60 && val <= 0x180; }, nullptr, nullptr)
// CharClient::CHealth* m_health;
OFFSET(charHealth, 0x388, "m_health", 0, 0, -0x14, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x250 && val <= 0x450; }, nullptr, nullptr)
// CharClient::CInventory* m_inventory;
OFFSET(charInventory, 0x390, "m_inventory", 0, 0, -0x14, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x250 && val <= 0x450; }, nullptr, nullptr)
// CharClient::CCoreStats* m_coreStats;
OFFSET(charCoreStats, 0x2F8, "m_coreStats", 0, 0, -0x11, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x200 && val <= 0x400; }, nullptr, nullptr)
//OFFSET(charName, 0x1B8, "TextValidateLiteral(m_nameOverride.Ptr())", 0, 0, -0x1C, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x100 && val <= 0x300; }, nullptr, nullptr)
OFFSET(charProfession, 0x470, "!m_profession", 0, 0, -0x10, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x360 && val <= 0x520; }, nullptr, nullptr)
// Search for "TextValidateLiteral(m_name.Ptr())" 1 function up
OFFSET(charFlags, 0x160, "TextValidateLiteral(m_name.Ptr())", 0, 0, -0x74, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0xA0 && val <= 0x2A0; }, nullptr, nullptr)
// CharClient::CEndurance* m_endurance;
// CharClient::CEndurance
OFFSET(charEndurance, 0x340, "!m_endurance", 0, 0, -0x1C, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x200 && val <= 0x400; }, nullptr, nullptr)
OFFSET(charSkillbar, 0x480, "!m_skillbar", 0, 0, -0x14, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x350 && val <= 0x550; }, nullptr, nullptr)
// charID
// Search for "sourceCharacter->IsFinalized()" and scroll 2 functions down
/*================================================================================================
00007FF6C248FE4F | CC                                  | int3                                    |
00007FF6C248FE50 | 40 53                               | push rbx                                |
00007FF6C248FE52 | 48 83 EC 20                         | sub rsp,20                              |
00007FF6C248FE56 | 48 8B D9                            | mov rbx,rcx                             |
00007FF6C248FE59 | E8 A2 03 1D 00                      | call gw2-64.7FF6C2660200                |
00007FF6C248FE5E | 41 B9 01 00 00 00                   | mov r9d,1                               |
00007FF6C248FE64 | 48 8B 50 08                         | mov rdx,qword ptr ds:[rax+8]            |
00007FF6C248FE68 | 48 8D 48 08                         | lea rcx,qword ptr ds:[rax+8]            |
00007FF6C248FE6C | 4C 63 42 04                         | movsxd r8,dword ptr ds:[rdx+4]          |
00007FF6C248FE70 | 48 8B 93 88 00 00 00                | mov rdx,qword ptr ds:[rbx+88]           |		<== THIS
00007FF6C248FE77 | 49 03 C8                            | add rcx,r8                              |
================================================================================================*/
OFFSET(charId, 0x88, "48 8B 50 08 48 8D 48 08 4C 63 42 04 48 8B 93", 0, 0, 0xF, sizeof(uint32_t), false, false, VERIFY_CB { return val >= 0x40 && val <= 0x180; }, nullptr, nullptr)


// Player offsets.
// "TTagList<struct CharClient::IPlayerNotify>::~TTagList"
OFFSET(playerVt, 0x7ff716577340, "m_notifyList.IsEmpty()", 0, 2, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x16); }, nullptr)
// Search for "charClient" 2nd function down
OFFSET(playerVtGetChar, 0x20, L"CharClient", 0, 0, 0x4f, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x10 && val <= 0x80; }, nullptr, nullptr)
OFFSET(playerName, 0x68, "TextValidateLiteral(m_name.Ptr())", 0, 0, -0x1F, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x30 && val <= 0x130; }, nullptr, nullptr)
OFFSET(playerVtGetName, 0x78, "StrCmp(newName, m_character->GetPlayer()->GetName()) != 0", 0, 0, -0x1E, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x40 && val <= 0x140; }, nullptr, nullptr)
OFFSET(playerVtGetSpecMgr, 0x2B0, "m_character->GetPlayer()->GetSpecializationMgr() == specMgr", 0, 0, -0x13, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x260 && val <= 0x360; }, nullptr, nullptr)


// Combatant
OFFSET(combatantVt, 0x7ff716576890, "!m_profession", 0, 0, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x431); }, nullptr)
OFFSET(combatantVtGetBuffbar, 0x40, "skillDef->GetBuff()", 0, 0, 0x17, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x20 && val <= 0x80; }, nullptr, nullptr)
OFFSET(combatantBuffbar, 0x88, "!m_profession", 0, 0, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return val >= 0x60 && val <= 0x160; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x431); }, POST_CB_VT(g_offsets.combatantVtGetBuffbar.val, 0x3))

OFFSET(inventoryVt, 0x7ff716579498, L"Inventory Notification still registered for module '%s'", 0, 0, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x47); }, nullptr)
OFFSET(invEquipItemArr, 0x140, "location.equipSlot < arrsize(m_equipmentSlots)", 0, 0, 0x1E, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x100 && val <= 0x240; }, nullptr, nullptr)
// Search for "colorSlot < ConstItem::COLOR_SLOTS" one function up, first LEA in the function
/*================================================================================================
00007FF6510F0B4A | 57                                  | push rdi                                |
00007FF6510F0B4B | 48 83 EC 20                         | sub rsp,20                              |
00007FF6510F0B4F | 49 8B D8                            | mov rbx,r8                              |
00007FF6510F0B52 | 48 8B F1                            | mov rsi,rcx                             |
00007FF6510F0B55 | E8 B6 E0 FF FF                      | call gw2-64.7FF6510EEC10                |
00007FF6510F0B5A | 48 8D 8E 98 00 00 00                | lea rcx,qword ptr ds:[rsi+98]           |
00007FF6510F0B61 | 48 8B D3                            | mov rdx,rbx                             |
00007FF6510F0B64 | E8 17 24 00 00                      | call gw2-64.7FF6510F2F80                |
00007FF6510F0B69 | 48 8D 05 80 01 D5 00                | lea rax,qword ptr ds:[7FF651E40CF0]     |		<== THIS
00007FF6510F0B70 | 48 8D 8E D8 00 00 00                | lea rcx,qword ptr ds:[rsi+D8]           |
00007FF6510F0B77 | 48 89 06                            | mov qword ptr ds:[rsi],rax              |
00007FF6510F0B7A | 48 8D 05 B7 07 D5 00                | lea rax,qword ptr ds:[7FF651E41338]     |
================================================================================================*/
OFFSET(equipItemVt, 0x7ff7165a7080, "E8 ?? ?? ?? ?? 48 8D 8E ?? ?? ?? ?? 48 8B D3 E8 ?? ?? ?? ?? 48 8D 05", 0, 0, 0x0, sizeof(uint32_t), false, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o+0x17); }, nullptr)
OFFSET(equipItemVt0, 0x7ff7165a7080, "colorSlot < ConstItem::COLOR_SLOTS", 0, 4, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x8d); }, nullptr)
OFFSET(equipItemDef, 0x40, "!oldDef || m_itemDef == oldDef", 0, 0, -0xD, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x20 && val <= 0xA0; }, nullptr, nullptr)
OFFSET(equipItemVtGetSkin, 0x60, "item->GetSkinDef() != skinDef", 0, 0, -0x14, sizeof(uint8_t), true, false, VERIFY_CB { return val >= 0x30 && val <= 0x130; }, nullptr, nullptr)
OFFSET(equipItemVtGetUpgrades, 0x208, "m_equipmentSlots[equipSlot] == NULL", 0, 0, 0x108, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x150 && val <= 0x300; }, nullptr, nullptr)

// Contact
OFFSET(contactCtxGetContact, 0x238, "profession < arrsize(m_professionLookup)", 0, 0, -0x82, sizeof(uint32_t), true, false, VERIFY_CB { return val >= 0x1B0 && val <= 0x380; }, nullptr, nullptr)

// WorldView context (ViewAdvanceWorldView)
OFFSET(wvctxVt, 0x7ff7165d11a8, "m_notifier.IsEmpty()", 0, 20, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o-0x27); }, nullptr)
OFFSET(wvctxVt0, 0x7ff7165d11a8, "StsRequest without protocol", 0, 0, 0x0, sizeof(uint32_t), true, true, VERIFY_CB { return true; }, SHIFT_CB { return hl::FollowRelativeAddress(o+0xEE); }, nullptr)

// Search for "onRendered" scroll up to first relative call 
/*================================================================================================
00007FF6511C4951 | 4C 8D 44 24 30                      | lea r8,qword ptr ss:[rsp+30]            |
00007FF6511C4956 | 48 89 4C 24 20                      | mov qword ptr ss:[rsp+20],rcx           |
00007FF6511C495B | 48 8B C8                            | mov rcx,rax                             |
00007FF6511C495E | 33 D2                               | xor edx,edx                             |
00007FF6511C4960 | 41 FF 52 78                         | call qword ptr ds:[r10+78]              |		<== THIS
00007FF6511C4964 | 85 C0                               | test eax,eax                            |
00007FF6511C4966 | 74 0A                               | je gw2-64.7FF6511C4972                  |
00007FF6511C4968 | 48 8D 4C 24 30                      | lea rcx,qword ptr ss:[rsp+30]           |
00007FF6511C496D | E8 3E 79 C1 FF                      | call gw2-64.7FF650DDC2B0                |
00007FF6511C4972 | F6 43 08 01                         | test byte ptr ds:[rbx+8],1              |
00007FF6511C4976 | 75 07                               | jne gw2-64.7FF6511C497F                 |
00007FF6511C4978 | BF 0A 00 00 00                      | mov edi,A                               | A:'\n'
================================================================================================*/
OFFSET(wvctxVtGetMetrics, 0x78, "33 D2 41 FF 52 ?? 85 C0", 0, 0, 0x5, sizeof(uint8_t), false, false, VERIFY_CB { return val >= 0x40 && val <= 0x140; }, nullptr, nullptr)
